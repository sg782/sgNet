1. MAKE SURE memory is handled how I want it to be handled 
    - update override equality signs to pass references and not just copy
    - check all of the overridden operators
        - for both vector and tensor2d
2. watch a video on pointers
3. update function declarations to include 'const' where applicable.
4. update and add more error/ bounds messages
5. update vector default constructor or whatever to let me declare a vector then set it to something later without resizing
6. VECTOR and TENSOR: add a shape() method that returns the shape
7. add a rowwise and colwise maximum
    - maybe rowwise and colwise tensors will have to become their own class
        - or could just add colMax and rowMax functions
8. add norm
9. vector change it to array operations maybe idk. it doesnt need to be resizable
10. standardize the API for all the layers
11. ADD bounds checks to all indexing and slicing functions
12. make vector initialiation possible using bracket notation: ie Vector v(3) = {1,5,4}
13. extend Frisbee class to be able to take any arithmetic type. Extend that up to all vector and tensor classes
14. improve on vector initializations, allow me to do Vector v(3){1,3,2} type thing;
    - on top of this, somehow create a distinction between int and double initializations. 
15. Im starting to get a little spaghetti with my vector class. specifically with reference handling and operator overloads. I must standardize soon
16. look into memory unsafe/ inefficient practices. I am sure i have tons 
17. LOCK DOWN the standard for if we are copying, overwriting, our updating frisbee values
18. remove unnecessary overloads that are leading to confusion. maybe im overloading too much



unrelated but i should make a voxel renderer